結論から：CVAT ⇔ MinIO を NGINX でリバースプロキシして連携することは可能です。
ただし “S3 署名 (SigV4)” の都合で API をサブパス配下に置く構成（例：https://example.com/s3/…）は不可、専用のホスト名（サブドメイン）で丸ごとプロキシするのが鉄則です。MinIO 公式もその前提で設定例を出しています。 ￼

以下、最小で動く構成と注意点をまとめます。

⸻

1) 推奨アーキテクチャ
	•	https://s3.example.com → (NGINX でそのまま) → MinIO の S3 API (:9000)
	•	https://console.example.com または https://s3.example.com/minio/ui → MinIO Console (:9001)
※API は 専用ドメイン直下で受ける。サブパスは不可（署名が壊れます）。 ￼

⸻

2) NGINX（S3 API用）の基本設定例

# s3.example.com 用（MinIO S3 API）
server {
  listen 443 ssl http2;
  server_name s3.example.com;

  # 大きなアップロードとストリーミングに配慮
  client_max_body_size 0;
  proxy_buffering off;
  proxy_request_buffering off;
  proxy_http_version 1.1;
  proxy_read_timeout 600s;
  proxy_send_timeout 600s;
  ignore_invalid_headers off;   # 署名計算対象ヘッダを落とさない
  # underscores_in_headers on;  # x-amz-meta-foo_bar など使う場合だけ

  # SigV4 向けに Host を絶対に変えない（超重要）
  location / {
    proxy_set_header Host              $http_host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Connection        "";
    chunked_transfer_encoding off;
    proxy_pass http://minio:9000;
  }

  # （必要なら）CORS をプロキシ側で返す暫定対処
  # add_header Access-Control-Allow-Origin https://cvat.example.com always;
  # add_header Access-Control-Allow-Methods "GET,PUT,POST,DELETE,HEAD,OPTIONS" always;
  # add_header Access-Control-Allow-Headers "Authorization,Content-Type,x-amz-acl,x-amz-date,x-amz-content-sha256,x-amz-security-token,x-amz-user-agent,x-amz-meta-*" always;
  # if ($request_method = 'OPTIONS') { return 204; }
}

この形は MinIO 公式の NGINX 設定方針に沿っています（専用 DNS・Host ヘッダ温存・バッファ無効化など）。 ￼

補足：SigV4 は Host やパスを 1 文字でも改変すると署名不一致になります。多くの “プロキシ越しで S3 署名が合わない問題” は Host / パス / ヘッダ書き換えが原因です。 ￼ ￼ ￼

⸻

3) MinIO 側のポイント（CORS と環境変数）
	•	CORS は MinIO 側で全体設定するのが楽です（Community 版はバケット単位の PUT Bucket CORS が未対応。AIStor/商用のみ）。
→ 例：MINIO_API_CORS_ALLOW_ORIGIN=https://cvat.example.com を MinIO 環境変数に設定。 ￼ ￼ ￼
（どうしても触れない場合は、上の NGINX add_header でレスポンスに付与しても動きます）
	•	MinIO の 公式 NGINX 手順をベースに（必要に応じて Console 用ロケーションも追加）。 ￼

⸻

4) CVAT 側の設定

自前ホストの CVAT は S3 互換ストレージのカスタム Endpoint を指定可能です。
（この “Endpoint URL を受け付ける” 仕様は CVAT の脆弱性アドバイザリにも明記） ￼

UI から：
	1.	「Cloud storages」→「＋」
	2.	Provider: AWS S3
	3.	Bucket name: your-bucket
	4.	Authentication: Access key / Secret key（MinIOのAK/SK）
	5.	Endpoint URL: https://s3.example.com（← NGINX の公開FQDN）
	6.	Region: 任意（us-east-1 で可）
	7.	Submit
（CVAT のクラウドストレージ接続手順はこちら） ￼

備考：endpoint_url を使う SDK（boto3）は 自動的に “パス形式 (path-style)” を使うため、ワイルドカードDNSの用意や MINIO_DOMAIN 設定は不要です。 ￼ ￼

⸻

5) ありがちなハマりどころ（チェックリスト）
	•	サブパス配下に置いた → SignatureDoesNotMatch。専用ホスト直下に戻す。 ￼
	•	Host ヘッダを upstream 名に変えている → 署名不一致。proxy_set_header Host $http_host; を厳守。 ￼
	•	CORS エラー（ブラウザのコンソールに表示）
	•	MinIO で MINIO_API_CORS_ALLOW_ORIGIN を設定（推奨）。 ￼ ￼
	•	もしくは NGINX 側で Access-Control-* を付与。
	•	413 (Request Entity Too Large) → client_max_body_size を十分大きく。 ￼
	•	タイムアウト（大容量の multipart upload）→ proxy_read_timeout / proxy_send_timeout を延長、proxy_request_buffering off;。 ￼
	•	時刻ずれ（署名の X-Amz-Date）→ サーバの NTP 同期を確認（数分のズレで失敗します）。
	•	ブラウザからの直接アクセスを使うケースで プリサインURL を利用するなら、プロキシがヘッダを改変しないこと（Authorization/x-amz-* を温存）。 ￼

⸻

6) 動作確認コマンド（サーバ側）

NGINX 経由で MinIO に届いているかを SDK/CLI で確認：

# AWS CLI を MinIO に向ける例
aws --endpoint-url https://s3.example.com s3 ls \
  --no-verify-ssl  #（自己署名なら一時的に）

SignatureDoesNotMatch が出たら、まず Host ヘッダとサブパス禁止を疑ってください。 ￼

⸻

まとめ（設計の勘所）
	•	可能：CVAT⇔MinIO を NGINX 逆プロキシで問題なく運用できる。
	•	必須条件：専用サブドメイン直下で API をプロキシ／Host を保持／CORS 設定。 ￼ ￼
	•	CVAT 側：Cloud Storage に Endpoint URL と AK/SK を設定すれば OK。 ￼ ￼

必要なら、あなたのドメイン名・既存 compose/helm 構成に合わせ
た 具体的な NGINX サーバーブロック／docker-compose の 
env 設定まで落とし込みます。どの形で運用中か（ホスト名、TLS 終端の場所、CVAT/MinIO のバージョン）だけ教えてください。








---
結論：対策できます。いまの構成だと、CVAT から指定している URL が MinIO のコンソール(9001) を /minio にプロキシしたものになっています。しかし CVAT が必要なのは S3 API(9000) のエンドポイントです。さらに S3 の署名仕様上、/minio のようなサブパス配下で S3 API を出すと署名がずれて 403/SignatureDoesNotMatch になりやすいため、API をサブパスに載せるのは非推奨です。MinIO 公式も「API はドメイン直下、コンソールは /minio サブパス可」と案内しています。 ￼

⸻

直し方（おすすめ順）

1) いちばん簡単：CVAT から MinIO:9000 を直接叩く
	•	CVAT の Cloud Storage 設定（Provider: AWS S3 互換）で
	•	Endpoint URL: http://xxx:9000（※コンソールではなく S3 API）
	•	Access key / Secret key / Bucket 名 を設定
	•	CVAT サーバ（コンテナ）から xxx:9000 に到達できれば、ブラウザから MinIO を直接見せる必要はありません。
MinIO の API をサブパスに載せないので署名のズレも起きません。
（CVAT の Cloud Storage 設定手順は公式ドキュメント参照） ￼

2) どうしても NGINX 経由にしたい：API は“ルート”、コンソールは“/minio”
	•	S3 API(9000) は 別ホスト名（または別ポート）のルートでプロキシします
例）http://s3.xxx → http://127.0.0.1:9000
	•	コンソール(9001) は今のように /minio サブパスで OK（必要なら MINIO_BROWSER_REDIRECT_URL を http://xxx:8080/minio/ に設定） ￼

サンプル nginx（要点のみ）：

# S3 API はルートで（サブパス不可）
server {
  listen 80;
  server_name s3.xxx;                 # 例：s3 用の名前
  client_max_body_size 0;
  location / {
    proxy_set_header Host $host;      # 署名検証で必須
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:9000;
    proxy_buffering off;
  }
}

# コンソールは /minio サブパスで OK
server {
  listen 8080;
  server_name xxx;

  location ^~ /minio/ {
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    rewrite ^/minio/(.*)$ /$1 break;  # コンソール内部パスに合わせる
    proxy_pass http://127.0.0.1:9001/;
  }

  # （既存の CVAT へのプロキシはそのまま）
  location / {
    proxy_pass http://127.0.0.1:8080; # CVAT
  }
}

ポイント
	•	API をサブパスに載せない（署名計算上サポートされません）。 ￼
	•	署名整合性のため proxy_set_header Host $host; を必ず付ける（Host が変わると署名不一致）。 ￼
	•	コンソールを /minio に置く場合は MINIO_BROWSER_REDIRECT_URL を外向き URL にしておくとリンクが正しくなります。 ￼

⸻

ありがちなハマりどころ（チェックリスト）
	•	CVAT の Endpoint URL を 9001 や /minio にしていないか？ → NG（コンソールは API ではない）
	•	API を /minio サブパスでプロキシしていないか？ → NG（署名崩れ） ￼
	•	NGINX で proxy_set_header Host を落としていないか？ → NG（Host が変わると署名不一致） ￼
	•	CVAT から MinIO:9000 に到達できるか？（Docker ネットワーク／FW でブロックしていないか）
	•	バケット名・権限が正しいか？（認証エラー時は CVAT 側ログも確認）
	•	（参考）MinIO 側は S3 互換 API なので、CVAT の S3 連携で問題なく使えます。 ￼

⸻

必要なら、あなたの現在の nginx 設定（server/location 部分）と CVAT の Cloud Storage 入力値（Endpoint、Bucket など）を書いてくれれば、そのまま差し替え可能な最小変更パッチにして返します。




---


できます。手動アップロードは通るのに MinIO 経由だと失敗する場合、だいたい次のどれかが原因です。サッとチェックしてみてください。

1) “正しい”エンドポイントを使う
	•	CVAT の「Cloud storages」で Provider: AWS S3 を選び、Endpoint URL は MinIO の S3 API ポート（通常 :9000） を指定します。:9001 はコンソール用なので不可、また /minio のようなサブパス配下をエンドポイントにするのも不可です。MinIO は S3 API=:9000 / Console=:9001 というポート構成です。  ￼
	•	CVAT は S3 互換ストレージ向けに カスタム Endpoint URL を受け付けます（＝MinIO を直接指定できる）。  ￼
	•	CVAT の入力欄はだいたい以下：Bucket name / Access key / Secret key / (Region 任意) / Prefix 任意 / Endpoint URL（例：http://xxx:9000）。手順は公式の「Attach cloud storage」を参照。  ￼

2) ブラウザからの取得用に CORS を入れる

CVAT はクラウドストレージのオブジェクトにブラウザから署名 URL で直接アクセスする場合があるため、MinIO のバケットに CORS を設定しておきます（少なくとも GET/HEAD、輸出もするなら PUT など）。
例（cors.json）:

{
  "CORSRules": [
    {
      "AllowedOrigins": ["http://xxx:8080"],
      "AllowedMethods": ["GET","HEAD","PUT"],
      "AllowedHeaders": ["*"],
      "ExposeHeaders": ["ETag","x-amz-request-id"],
      "MaxAgeSeconds": 3000
    }
  ]
}

適用コマンド例：
	•	AWS CLI: aws s3api put-bucket-cors --bucket <BUCKET> --cors-configuration file://cors.json  ￼
	•	MinIO Client(mc): mc cors set-json myminio/<BUCKET> cors.json  ￼

3) 動画は manifest.jsonl を用意すると安定する

クラウドストレージ上の 動画をタスクにする時は manifest.jsonl を併置すると作成が安定・高速化します。CVAT 公式の生成ツールを使うと簡単です（Docker で実行可能）。
例：

docker run --rm -u "$(id -u)":"$(id -g)" -v "$PWD":/local \
  --entrypoint python3 cvat/server \
  utils/dataset_manifest/create.py --output-dir /local /local/video.mp4

※キーフレームが少ない動画は --force を付けると作れます。できた manifest.jsonl を 同じプレフィックスにアップして、Cloud Storage の設定でそのファイル名を登録してください。  ￼
CVAT の動画対応は ffmpeg が読める一般的な形式（MP4/AVI/MOV など）が対象です。  ￼

4) ローカル/プライベート IP を CVAT がブロックしているケース

CVAT は内部で Smokescreen によりプライベートアドレス宛の外向き通信をデフォルト拒否します。MinIO が同一ネットワーク上（例：172.18.0.0/16）だと “Deny: Private Range” で弾かれることがあります。
.env に例のように許可レンジを足すと解消します（自己責任で最小範囲の許可にしてください）：

SMOKESCREEN_OPTS=--allow-range=172.18.0.0/16

この事象と回避はコミュニティにもまとまっています。  ￼

5) クイック診断
	•	CVAT サーバーから MinIO に届くか：
curl -I http://xxx:9000/minio/health/ready → 200 OK なら到達。  ￼
	•	Cloud Storage 画面でバケットやプレフィックスが見えない → 認証情報/バケット権限、Endpoint URL（9000になっているか）と CORS を再確認。手順は CVAT ドキュメント通りでOK。  ￼

⸻

まとめ（チェックリスト）
	•	CVAT 側 Provider=AWS S3 / Endpoint=http://xxx:9000（コンソール:9001 や /minio サブパスは使わない）  ￼
	•	MinIO バケットに CORS（少なくとも GET/HEAD） を設定  ￼
	•	動画には manifest.jsonl を置いて Cloud Storage 設定で指定（--force が効く場合あり）  ￼
	•	MinIO がプライベート IP の場合は SMOKESCREEN_OPTS で許可レンジ追加  ￼

これで MinIO に置いた動画を CVAT から参照してアノテーションできるはずです。うまくいかなければ、どこでエラーになるか（Cloud Storage 追加時か、タスク作成時か、フレームの表示時か）を教えてください。ログの読み方も含めて切り分けます。








---

なるほど、:9000 に変えたら一覧は見えるようになったけど、タスク作成の途中で “Data processing failed / Could not create the task” ですね。
この症状は、一覧（サーバー側のリスト取得）は通るのに、実データ取得→前処理（フレーム抽出）でワーカーがコケるときに出がちです。再現しやすい順に対処を並べます。

⸻

最優先で見るポイント（これで直ることが多い）

1) Worker 側が MinIO へ到達できていない（Smokescreen/ネットワーク）

CVAT は サーバ（cvat_server）とワーカー（cvat_worker）が別コンテナです。
サーバでは MinIO に到達できるが、ワーカーからはブロック（プライベートレンジ拒否やプロキシ設定差分）で落ちると、0% のまま “Data processing failed” になります。

対策
	•	Smokescreen の許可レンジ（プライベートアドレス帯）を ワーカーにも適用する。.env か compose に以下を追加し、server と worker の両方に反映:

SMOKESCREEN_OPTS=--allow-range=172.18.0.0/16

※ 例は Docker ネットワークのレンジ。docker network inspect で実際の CIDR を確認して置き換え。

	•	ついでに no_proxy に MinIO のホスト/ポートを入れて、直接到達させます（プロキシ経由にしない）:

no_proxy=localhost,127.0.0.1,minio,xxx,xxx:9000


	•	再起動後、両方のコンテナから疎通確認:

docker compose exec cvat_server curl -s -I http://<minio-host>:9000/minio/health/ready
docker compose exec cvat_worker curl -s -I http://<minio-host>:9000/minio/health/ready

両方とも 200 OK なら OK。

ありがち：server だけ許可して worker の許可を忘れる → 一覧は見えるが処理で失敗、という今の症状に一致します。

⸻

2) S3 権限が GET/HEAD で不足

List は通るが Get で 403 になると同じエラーになります。
MinIO 側の ユーザ/ポリシーに、対象バケットへ最低限これが必要です：
	•	s3:ListBucket（バケット）
	•	s3:GetObject と s3:HeadObject（オブジェクト）

サンプル（バケット policy.json）

{
  "Version": "2012-10-17",
  "Statement": [
    {"Effect":"Allow","Action":["s3:ListBucket"],"Resource":["arn:aws:s3:::<BUCKET>"]},
    {"Effect":"Allow","Action":["s3:GetObject","s3:HeadObject"],"Resource":["arn:aws:s3:::<BUCKET>/*"]}
  ]
}


⸻

3) manifest.jsonl を置く（動画は特に安定）

クラウドストレージ上の 動画は、同じプレフィックスに manifest.jsonl を置くと、
CVAT が動画のフレームインデックスを効率よく引けて 失敗が激減します。

作り方（CVAT のユーティリティで）

docker run --rm -u "$(id -u)":"(id -g)" -v "$PWD":/local \
  --entrypoint python3 cvat/server \
  utils/dataset_manifest/create.py --output-dir /local /local/video.mp4

できた manifest.jsonl を MinIO の該当フォルダにアップし、Cloud Storage 設定で Use manifest を有効にしてパスを指定。

⸻

4) 動画コーデック非対応/壊れかけ

ffmpeg が読めないコーデックや壊れかけの MP4/AVI だと 0% で落ちます。
一度 H.264 + AAC に再エンコードして試すのが早いです。

ffmpeg -i input.avi -c:v libx264 -preset medium -crf 18 -c:a aac -b:a 192k -movflags +faststart output.mp4


⸻

5) ディスク/一時領域不足

フレーム抽出の一時ファイルは server/worker の共有ボリュームに書かれます。
空きが少ないと処理が失敗。ホスト側の df -h と、CVAT ボリュームの空きを確認してください。

⸻

まずの切り分け（3分で分かる）
	1.	ブラウザの開発者ツール → Network
タスク作成時の POST /api/tasks と、その後の .../data リクエストのレスポンス本文を確認。
403/5xx やエラーメッセージがそのまま出ていることがあります。
	2.	サーバ/ワーカーのログを同時に確認

docker compose logs -f cvat_server cvat_worker

直近で ERROR, AccessDenied, SignatureDoesNotMatch, Deny: Private Range, ffmpeg などが出ていないか確認。

	3.	worker から MinIO へ直接 GET できるか

docker compose exec cvat_worker curl -I \
  "http://<minio-host>:9000/<BUCKET>/<prefix>/video.mp4"

403/Timeout なら #1 or #2 が濃厚。

⸻

設定の最終チェックリスト
	•	CVAT Cloud Storage: Provider = AWS S3, Endpoint = http://xxx:9000（コンソール:9001や /minio は使わない）
	•	server だけでなく worker も MinIO に到達可（Smokescreen 許可レンジ / no_proxy 設定）
	•	MinIO のポリシーに List/Get/Head が含まれる
	•	（動画）manifest.jsonl を置いて指定
	•	（怪しい動画）H.264/AAC で再エンコードして再テスト
	•	CVAT の作業ボリューム空き容量十分

⸻

もし .env / docker-compose.yml（server/worker の environment 周り）と、
Cloud Storage 入力値（Endpoint, Bucket, Prefix, Use manifest 有無）を貼ってもらえれば、そのまま差し替えられる最小修正パッチを作って返します。ログ断片（数行）もあれば原因を特定しやすいです。









---

スクショのスタックトレース、ここが核心です。

_create_task_manifest_from_cloud_data(...)
manifest.link(sources=content, ...)
self._raw_data_used = not isinstance(sources[0], str)
IndexError: list index out of range

＝ CVAT が “取り込み対象のファイル一覧（sources）を 1 件も見つけられていない” まま処理に入って、空配列の sources[0] を踏んでコケています。
つまり「Cloud Storage の接続自体は通ったが、タスク作成で“対象ファイルが0件扱い” になっている」状態です。

すぐ効く順に直し方を書きます。

⸻

まずここを直してください（高確率で解決）

1) 「データの種類」が実ファイルと合っているか

タスク作成画面の Data type（Images / Video / DICOM / Archive）で、
動画なら必ず “Video” を選択してください。
ここが Images になっていると、拡張子でフィルタされて 0件 になり、今回のエラーになります。

2) Prefix（パス）が正しいか

Cloud Storage の設定で：
	•	Bucket：mybucket
	•	Prefix：projects/foo/bar/ のように、バケット名は入れない／先頭に / を付けない
	•	動画がサブフォルダにあるなら、タスク作成側で Include subdirectories をオン

ありがちミス
	•	Prefix に /mybucket/... と書いてしまう
	•	Prefix の末尾 / を落としてディレクトリ解決に失敗

3) パターン（ファイル絞り込み）で除外していないか

Advanced → Filename pattern を使っていたら、一旦空（デフォルト）に戻すか、次にします：

.*\.(mp4|avi|mov|mkv)$

※ 実際の拡張子に合わせてください。

⸻

それでもダメなら（次の一手）

4) manifest.jsonl を置く（動画は特に安定）

同じプレフィックスに manifest.jsonl を置き、タスク作成時に Use manifest をオン。
生成コマンド例（CVAT サーバ画像を使う）：

docker run --rm -u "$(id -u)":"$(id -g)" -v "$PWD":/local \
  --entrypoint python3 cvat/server \
  utils/dataset_manifest/create.py --output-dir /local /local/video.mp4

できた manifest.jsonl を MinIO の Prefix 直下にアップし、UI では相対パスで manifest.jsonl を指定。

5) cvat_worker から本当に見えているかを確認

server では見えても worker から見えていない と 0 件になります。両方で疎通確認：

docker compose exec cvat_server curl -s -I http://<minio-host>:9000/minio/health/ready
docker compose exec cvat_worker curl -s -I http://<minio-host>:9000/minio/health/ready

どちらも 200 OK であること。

もし worker だけ失敗するなら
	•	.env または compose に SMOKESCREEN_OPTS（プライベートレンジ許可）を server と worker 両方へ入れる

SMOKESCREEN_OPTS=--allow-range=<あなたのDockerネットワークCIDR>


	•	no_proxy に MinIO ホスト（と :9000）を追加

6) S3 権限（List は通るが Get で落ちて 0 件扱い）

使っているユーザ／ポリシーに、対象バケットへ最低限これが必要です：
	•	s3:ListBucket
	•	s3:GetObject, s3:HeadObject

7) コーデック不一致・壊れかけ

ffmpeg が読めない動画だと、検出段階で “無効” と判断され 0 件になることがあります。
一度 H.264/AAC へ再エンコードして試すのが早いです：

ffmpeg -i input.avi -c:v libx264 -preset medium -crf 18 -c:a aac -b:a 192k -movflags +faststart output.mp4


⸻

3分診断（どこで 0 件になっているか見る）
	1.	タスク作成画面で Data type を Video にすると、右側のカウントが 1 files（または該当数）になるか？
→ なら OK。0 files のままなら上の 1)～3) をやり直し。
	2.	ブラウザ開発者ツール → Network で POST /api/tasks 以降のレスポンス本文を見る。
sources: [] や “no media found” の文言があれば、やはりファイル 0 件扱い。
	3.	worker から実ファイルに直接 HEAD：

docker compose exec cvat_worker curl -I \
  "http://<minio-host>:9000/<BUCKET>/<Prefix>/video.mp4"

403/404/timeout なら #5 or #6 を疑う。

⸻

最後にチェックリスト
	•	タスク作成の Data type = Video
	•	Prefix の書き方（先頭に / を付けない／バケット名を重ねない／末尾 /）
	•	Include subdirectories（必要ならオン）
	•	Filename pattern で除外していない
	•	（推奨）manifest.jsonl を置いて指定
	•	worker からも MinIO に到達できる（Smokescreen / no_proxy）
	•	MinIO のポリシーに List/Get/Head

ここまでやってもダメなら、Cloud Storage の設定値（Bucket/Prefix、Use manifest の有無）と、タスク作成画面の Data type・pattern のスクショをもう1枚ください。
その情報に合わせて「この値をこう直せば OK」という最小パッチで返します。



---

CVatとminioが動いてるマシンがあるが、80と8080ポート以外は開けない制限があり、プロキシしている事情がある

Minioを8081にし、cvatのエントリーポイントに設定したとして、複数ユーザが別マシンからcvatにアクセスして編集することは可能か

結論：可能です。
ただし S3 API を “サブパス無しのルート” で公開し、かつ クライアントのブラウザからも到達できるホスト名にするのがポイントです。
ポートが 80/8080 しか開けない制約でも、名前ベースの仮想ホストで同じ 8080 に CVAT と MinIO API を同居させれば OK です。

⸻

おすすめ構成（8080 だけ開けたまま）

1) ホスト名を 2 つ用意（同じ IP でOK）
	•	cvat.example.local:8080 … CVAT UI（今まで通り）
	•	s3.example.local:8080 … MinIO S3 API（サブパス無しの /）

※ 社内 DNS で 2 つの名前を同じ IP に向ける（難しければ各PCの hosts でも可）。
※ IP直打ちは不可（Host ヘッダが固定になり SigV4 署名がずれるため）。

2) NGINX（同じ 8080 で名前ベース振り分け）

# MinIO S3 API を 8080 の "s3.example.local" でルート公開
server {
  listen 8080;
  server_name s3.example.local;
  client_max_body_size 0;

  location / {
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $host;              # ← 署名で必須
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_buffering off;
    proxy_pass http://127.0.0.1:9000;         # MinIO API (内部)
  }
}

# CVAT UI を 8080 の "cvat.example.local" に
server {
  listen 8080;
  server_name cvat.example.local;

  location / {
    proxy_pass http://127.0.0.1:8082;         # 例: CVAT 本体は内部 8082 で稼働
  }

  # （任意）MinIO コンソールは /minio に載せるのはOK（APIはダメ）
  location ^~ /minio/ {
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $host;
    rewrite ^/minio/(.*)$ /$1 break;
    proxy_pass http://127.0.0.1:9001/;        # MinIO Console
  }
}

重要：API を /minio などのサブパスに置かないこと。署名が一致せずエラーになります。

3) CVAT 側の Cloud Storage 設定
	•	Provider: AWS S3
	•	Endpoint URL: http://s3.example.local:8080  ← サブパス無し
	•	Access key / Secret key: MinIO のキー（例：admin / password）
	•	Bucket: 例 mybucket
	•	Prefix: 例 datasets/projectA/（先頭/なし、バケット名を含めない、末尾/推奨）
	•	Advanced: Use path-style addressing = ON（MinIO はこれが安定）
	•	（まずは）Read-only = ON にして登録テストを通す

4) CORS（ブラウザからのアクセス用）

MinIO 側で CORS を設定（少なくとも GET/HEAD、必要なら PUT）。AllowedOrigins に
http://cvat.example.local:8080 を追加。

⸻

これで「複数ユーザが別マシンから CVAT を使う」時の挙動
	•	タスク作成時：CVAT サーバ／ワーカーが s3.example.local:8080 にアクセスしてクラウド上の動画を取得。
UI からの一覧表示や取り込み処理も OK。
	•	アノテーション時：通常は CVAT が取り込んだフレームを配信するので、ユーザのブラウザは CVAT だけにアクセスすれば編集可能。
ただし一部機能で署名 URL を返すケースに備え、ユーザ側からも s3.example.local:8080 が解決・到達できる状態にしておくと堅牢です（だから DNS/hosts を用意）。

⸻

代替パターン（どうしても DNS 名を増やせない場合）
	•	サーバ内向けだけに MinIO を 8081 で動かし、Endpoint を http://127.0.0.1:8081 にする方法もあります。
その場合、CVAT サーバ／ワーカーは到達できますが、ブラウザが S3 に直接行く機能を使うと失敗する可能性があるので、**基本は CVAT に取り込み（ローカルコピー）**させて使ってください。

⸻

最終チェックリスト
	•	MinIO API はルートで公開（サブパス禁止）
	•	CVAT Endpoint は http://<s3-host>:8080（Host ベースの仮想ホスト）
	•	Use path-style = ON
	•	CORS の AllowedOrigins に CVAT の Origin を追加
	•	worker からも curl -I http://s3.example.local:8080/minio/health/ready が 200
	•	タスク作成時は Select data source = Videos

この形にすれば、ポート制約（80/8080のみ）でも複数ユーザが問題なく CVAT を使って動画のアノテーションができます。








---

はい、同一の Docker ブリッジネットワークに入れれば OK です。
その場合、CVAT の Cloud Storage の Endpoint URL は http://minio:9000（= サービス名 + ポート）にできます。外向けに 9000 を開ける必要はありません。

⸻

やること（最短）
	1.	同一ネットワークに載せる

networks:
  cvat_net:
    driver: bridge
    # （任意）固定サブネットにしておくと後の許可レンジ指定が楽
    ipam:
      config:
        - subnet: 172.30.0.0/24

services:
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    # API 9000 は公開しない（ブラウザから触らせない）
    # ports: [ "9001:9001" ]  # ← コンソールを見たいならだけ公開
    networks:
      cvat_net:
        aliases: [minio, s3]   # ← CVAT から http://minio:9000 で到達させる

  cvat_server:
    image: cvat/server
    environment:
      # ← CVAT がプライベートレンジをブロックしないように許可
      SMOKESCREEN_OPTS: --allow-range=172.30.0.0/24
      no_proxy: "localhost,127.0.0.1,minio,s3"
    networks: [cvat_net]

  cvat_worker:
    image: cvat/worker
    environment:
      SMOKESCREEN_OPTS: --allow-range=172.30.0.0/24
      no_proxy: "localhost,127.0.0.1,minio,s3"
    networks: [cvat_net]

  # CVAT UI/Proxy などは既存のまま（外向けは 80/8080 のみ公開）

既存ネットワークを使うなら
docker network inspect <net名> で Subnet を見て、その CIDR を SMOKESCREEN_OPTS に入れてください。

	2.	CVAT の Cloud Storage を作成

	•	Provider: AWS S3
	•	Endpoint URL: http://minio:9000（サブパス不可）
	•	Access key / Secret key: MinIO の鍵（例: admin / password）
	•	Bucket / Prefix: 例 mybucket / datasets/projectA/（先頭/なし・末尾/推奨）
	•	Use path-style addressing = ON（MinIO はこれが安定）
	•	まずは Read-only = ON で登録が通るか確認

	3.	疎通チェック（両方のコンテナから）

docker compose exec cvat_server curl -s -I http://minio:9000/minio/health/ready
docker compose exec cvat_worker curl -s -I http://minio:9000/minio/health/ready
# どちらも 200 OK になること

	4.	タスク作成（動画）

	•	Cloud Storage タブで今作ったストレージを選ぶ
	•	Select data source = Videos に変更（超重要）
	•	必要なら Include subdirectories を ON
	•	（推奨）同階層に manifest.jsonl を置き Use manifest を ON

⸻

複数ユーザが別マシンから編集できるか？

できます。
MinIO API は Docker 内部ネットワーク専用、ブラウザは CVAT（80/8080）だけを見ます。
CVAT が MinIO から動画を取り込んでフレームを自前配信するため、ユーザ側が MinIO に直接届く必要はありません（= 社外公開不要）。
※ 例外的に署名 URL を返す機能を使う場合は CORS/到達性が必要ですが、通常のタスク作成→アノテーション運用では不要です。

⸻

つまずきがちな点（チェック）
	•	Endpoint URL = http://minio:9000（サブパスや 9001 は 不可）
	•	Use path-style = ON
	•	SMOKESCREEN_OPTS を server と worker の両方に設定（許可レンジは実サブネットに合わせる）
	•	no_proxy に minio を入れる
	•	MinIO 側ポリシーに ListBucket / GetObject / HeadObject（書き込みも要るなら Put/Delete も）

この形にすれば、外向けは 80/8080 だけのまま、CVAT⇔MinIO は内部ネットワークで安全・確実に連携できます。



