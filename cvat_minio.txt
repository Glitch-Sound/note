結論から：CVAT ⇔ MinIO を NGINX でリバースプロキシして連携することは可能です。
ただし “S3 署名 (SigV4)” の都合で API をサブパス配下に置く構成（例：https://example.com/s3/…）は不可、専用のホスト名（サブドメイン）で丸ごとプロキシするのが鉄則です。MinIO 公式もその前提で設定例を出しています。 ￼

以下、最小で動く構成と注意点をまとめます。

⸻

1) 推奨アーキテクチャ
	•	https://s3.example.com → (NGINX でそのまま) → MinIO の S3 API (:9000)
	•	https://console.example.com または https://s3.example.com/minio/ui → MinIO Console (:9001)
※API は 専用ドメイン直下で受ける。サブパスは不可（署名が壊れます）。 ￼

⸻

2) NGINX（S3 API用）の基本設定例

# s3.example.com 用（MinIO S3 API）
server {
  listen 443 ssl http2;
  server_name s3.example.com;

  # 大きなアップロードとストリーミングに配慮
  client_max_body_size 0;
  proxy_buffering off;
  proxy_request_buffering off;
  proxy_http_version 1.1;
  proxy_read_timeout 600s;
  proxy_send_timeout 600s;
  ignore_invalid_headers off;   # 署名計算対象ヘッダを落とさない
  # underscores_in_headers on;  # x-amz-meta-foo_bar など使う場合だけ

  # SigV4 向けに Host を絶対に変えない（超重要）
  location / {
    proxy_set_header Host              $http_host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Connection        "";
    chunked_transfer_encoding off;
    proxy_pass http://minio:9000;
  }

  # （必要なら）CORS をプロキシ側で返す暫定対処
  # add_header Access-Control-Allow-Origin https://cvat.example.com always;
  # add_header Access-Control-Allow-Methods "GET,PUT,POST,DELETE,HEAD,OPTIONS" always;
  # add_header Access-Control-Allow-Headers "Authorization,Content-Type,x-amz-acl,x-amz-date,x-amz-content-sha256,x-amz-security-token,x-amz-user-agent,x-amz-meta-*" always;
  # if ($request_method = 'OPTIONS') { return 204; }
}

この形は MinIO 公式の NGINX 設定方針に沿っています（専用 DNS・Host ヘッダ温存・バッファ無効化など）。 ￼

補足：SigV4 は Host やパスを 1 文字でも改変すると署名不一致になります。多くの “プロキシ越しで S3 署名が合わない問題” は Host / パス / ヘッダ書き換えが原因です。 ￼ ￼ ￼

⸻

3) MinIO 側のポイント（CORS と環境変数）
	•	CORS は MinIO 側で全体設定するのが楽です（Community 版はバケット単位の PUT Bucket CORS が未対応。AIStor/商用のみ）。
→ 例：MINIO_API_CORS_ALLOW_ORIGIN=https://cvat.example.com を MinIO 環境変数に設定。 ￼ ￼ ￼
（どうしても触れない場合は、上の NGINX add_header でレスポンスに付与しても動きます）
	•	MinIO の 公式 NGINX 手順をベースに（必要に応じて Console 用ロケーションも追加）。 ￼

⸻

4) CVAT 側の設定

自前ホストの CVAT は S3 互換ストレージのカスタム Endpoint を指定可能です。
（この “Endpoint URL を受け付ける” 仕様は CVAT の脆弱性アドバイザリにも明記） ￼

UI から：
	1.	「Cloud storages」→「＋」
	2.	Provider: AWS S3
	3.	Bucket name: your-bucket
	4.	Authentication: Access key / Secret key（MinIOのAK/SK）
	5.	Endpoint URL: https://s3.example.com（← NGINX の公開FQDN）
	6.	Region: 任意（us-east-1 で可）
	7.	Submit
（CVAT のクラウドストレージ接続手順はこちら） ￼

備考：endpoint_url を使う SDK（boto3）は 自動的に “パス形式 (path-style)” を使うため、ワイルドカードDNSの用意や MINIO_DOMAIN 設定は不要です。 ￼ ￼

⸻

5) ありがちなハマりどころ（チェックリスト）
	•	サブパス配下に置いた → SignatureDoesNotMatch。専用ホスト直下に戻す。 ￼
	•	Host ヘッダを upstream 名に変えている → 署名不一致。proxy_set_header Host $http_host; を厳守。 ￼
	•	CORS エラー（ブラウザのコンソールに表示）
	•	MinIO で MINIO_API_CORS_ALLOW_ORIGIN を設定（推奨）。 ￼ ￼
	•	もしくは NGINX 側で Access-Control-* を付与。
	•	413 (Request Entity Too Large) → client_max_body_size を十分大きく。 ￼
	•	タイムアウト（大容量の multipart upload）→ proxy_read_timeout / proxy_send_timeout を延長、proxy_request_buffering off;。 ￼
	•	時刻ずれ（署名の X-Amz-Date）→ サーバの NTP 同期を確認（数分のズレで失敗します）。
	•	ブラウザからの直接アクセスを使うケースで プリサインURL を利用するなら、プロキシがヘッダを改変しないこと（Authorization/x-amz-* を温存）。 ￼

⸻

6) 動作確認コマンド（サーバ側）

NGINX 経由で MinIO に届いているかを SDK/CLI で確認：

# AWS CLI を MinIO に向ける例
aws --endpoint-url https://s3.example.com s3 ls \
  --no-verify-ssl  #（自己署名なら一時的に）

SignatureDoesNotMatch が出たら、まず Host ヘッダとサブパス禁止を疑ってください。 ￼

⸻

まとめ（設計の勘所）
	•	可能：CVAT⇔MinIO を NGINX 逆プロキシで問題なく運用できる。
	•	必須条件：専用サブドメイン直下で API をプロキシ／Host を保持／CORS 設定。 ￼ ￼
	•	CVAT 側：Cloud Storage に Endpoint URL と AK/SK を設定すれば OK。 ￼ ￼

必要なら、あなたのドメイン名・既存 compose/helm 構成に合わせ
た 具体的な NGINX サーバーブロック／docker-compose の 
env 設定まで落とし込みます。どの形で運用中か（ホスト名、TLS 終端の場所、CVAT/MinIO のバージョン）だけ教えてください。








---
結論：対策できます。いまの構成だと、CVAT から指定している URL が MinIO のコンソール(9001) を /minio にプロキシしたものになっています。しかし CVAT が必要なのは S3 API(9000) のエンドポイントです。さらに S3 の署名仕様上、/minio のようなサブパス配下で S3 API を出すと署名がずれて 403/SignatureDoesNotMatch になりやすいため、API をサブパスに載せるのは非推奨です。MinIO 公式も「API はドメイン直下、コンソールは /minio サブパス可」と案内しています。 ￼

⸻

直し方（おすすめ順）

1) いちばん簡単：CVAT から MinIO:9000 を直接叩く
	•	CVAT の Cloud Storage 設定（Provider: AWS S3 互換）で
	•	Endpoint URL: http://xxx:9000（※コンソールではなく S3 API）
	•	Access key / Secret key / Bucket 名 を設定
	•	CVAT サーバ（コンテナ）から xxx:9000 に到達できれば、ブラウザから MinIO を直接見せる必要はありません。
MinIO の API をサブパスに載せないので署名のズレも起きません。
（CVAT の Cloud Storage 設定手順は公式ドキュメント参照） ￼

2) どうしても NGINX 経由にしたい：API は“ルート”、コンソールは“/minio”
	•	S3 API(9000) は 別ホスト名（または別ポート）のルートでプロキシします
例）http://s3.xxx → http://127.0.0.1:9000
	•	コンソール(9001) は今のように /minio サブパスで OK（必要なら MINIO_BROWSER_REDIRECT_URL を http://xxx:8080/minio/ に設定） ￼

サンプル nginx（要点のみ）：

# S3 API はルートで（サブパス不可）
server {
  listen 80;
  server_name s3.xxx;                 # 例：s3 用の名前
  client_max_body_size 0;
  location / {
    proxy_set_header Host $host;      # 署名検証で必須
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:9000;
    proxy_buffering off;
  }
}

# コンソールは /minio サブパスで OK
server {
  listen 8080;
  server_name xxx;

  location ^~ /minio/ {
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    rewrite ^/minio/(.*)$ /$1 break;  # コンソール内部パスに合わせる
    proxy_pass http://127.0.0.1:9001/;
  }

  # （既存の CVAT へのプロキシはそのまま）
  location / {
    proxy_pass http://127.0.0.1:8080; # CVAT
  }
}

ポイント
	•	API をサブパスに載せない（署名計算上サポートされません）。 ￼
	•	署名整合性のため proxy_set_header Host $host; を必ず付ける（Host が変わると署名不一致）。 ￼
	•	コンソールを /minio に置く場合は MINIO_BROWSER_REDIRECT_URL を外向き URL にしておくとリンクが正しくなります。 ￼

⸻

ありがちなハマりどころ（チェックリスト）
	•	CVAT の Endpoint URL を 9001 や /minio にしていないか？ → NG（コンソールは API ではない）
	•	API を /minio サブパスでプロキシしていないか？ → NG（署名崩れ） ￼
	•	NGINX で proxy_set_header Host を落としていないか？ → NG（Host が変わると署名不一致） ￼
	•	CVAT から MinIO:9000 に到達できるか？（Docker ネットワーク／FW でブロックしていないか）
	•	バケット名・権限が正しいか？（認証エラー時は CVAT 側ログも確認）
	•	（参考）MinIO 側は S3 互換 API なので、CVAT の S3 連携で問題なく使えます。 ￼

⸻

必要なら、あなたの現在の nginx 設定（server/location 部分）と CVAT の Cloud Storage 入力値（Endpoint、Bucket など）を書いてくれれば、そのまま差し替え可能な最小変更パッチにして返します。




---


できます。手動アップロードは通るのに MinIO 経由だと失敗する場合、だいたい次のどれかが原因です。サッとチェックしてみてください。

1) “正しい”エンドポイントを使う
	•	CVAT の「Cloud storages」で Provider: AWS S3 を選び、Endpoint URL は MinIO の S3 API ポート（通常 :9000） を指定します。:9001 はコンソール用なので不可、また /minio のようなサブパス配下をエンドポイントにするのも不可です。MinIO は S3 API=:9000 / Console=:9001 というポート構成です。  ￼
	•	CVAT は S3 互換ストレージ向けに カスタム Endpoint URL を受け付けます（＝MinIO を直接指定できる）。  ￼
	•	CVAT の入力欄はだいたい以下：Bucket name / Access key / Secret key / (Region 任意) / Prefix 任意 / Endpoint URL（例：http://xxx:9000）。手順は公式の「Attach cloud storage」を参照。  ￼

2) ブラウザからの取得用に CORS を入れる

CVAT はクラウドストレージのオブジェクトにブラウザから署名 URL で直接アクセスする場合があるため、MinIO のバケットに CORS を設定しておきます（少なくとも GET/HEAD、輸出もするなら PUT など）。
例（cors.json）:

{
  "CORSRules": [
    {
      "AllowedOrigins": ["http://xxx:8080"],
      "AllowedMethods": ["GET","HEAD","PUT"],
      "AllowedHeaders": ["*"],
      "ExposeHeaders": ["ETag","x-amz-request-id"],
      "MaxAgeSeconds": 3000
    }
  ]
}

適用コマンド例：
	•	AWS CLI: aws s3api put-bucket-cors --bucket <BUCKET> --cors-configuration file://cors.json  ￼
	•	MinIO Client(mc): mc cors set-json myminio/<BUCKET> cors.json  ￼

3) 動画は manifest.jsonl を用意すると安定する

クラウドストレージ上の 動画をタスクにする時は manifest.jsonl を併置すると作成が安定・高速化します。CVAT 公式の生成ツールを使うと簡単です（Docker で実行可能）。
例：

docker run --rm -u "$(id -u)":"$(id -g)" -v "$PWD":/local \
  --entrypoint python3 cvat/server \
  utils/dataset_manifest/create.py --output-dir /local /local/video.mp4

※キーフレームが少ない動画は --force を付けると作れます。できた manifest.jsonl を 同じプレフィックスにアップして、Cloud Storage の設定でそのファイル名を登録してください。  ￼
CVAT の動画対応は ffmpeg が読める一般的な形式（MP4/AVI/MOV など）が対象です。  ￼

4) ローカル/プライベート IP を CVAT がブロックしているケース

CVAT は内部で Smokescreen によりプライベートアドレス宛の外向き通信をデフォルト拒否します。MinIO が同一ネットワーク上（例：172.18.0.0/16）だと “Deny: Private Range” で弾かれることがあります。
.env に例のように許可レンジを足すと解消します（自己責任で最小範囲の許可にしてください）：

SMOKESCREEN_OPTS=--allow-range=172.18.0.0/16

この事象と回避はコミュニティにもまとまっています。  ￼

5) クイック診断
	•	CVAT サーバーから MinIO に届くか：
curl -I http://xxx:9000/minio/health/ready → 200 OK なら到達。  ￼
	•	Cloud Storage 画面でバケットやプレフィックスが見えない → 認証情報/バケット権限、Endpoint URL（9000になっているか）と CORS を再確認。手順は CVAT ドキュメント通りでOK。  ￼

⸻

まとめ（チェックリスト）
	•	CVAT 側 Provider=AWS S3 / Endpoint=http://xxx:9000（コンソール:9001 や /minio サブパスは使わない）  ￼
	•	MinIO バケットに CORS（少なくとも GET/HEAD） を設定  ￼
	•	動画には manifest.jsonl を置いて Cloud Storage 設定で指定（--force が効く場合あり）  ￼
	•	MinIO がプライベート IP の場合は SMOKESCREEN_OPTS で許可レンジ追加  ￼

これで MinIO に置いた動画を CVAT から参照してアノテーションできるはずです。うまくいかなければ、どこでエラーになるか（Cloud Storage 追加時か、タスク作成時か、フレームの表示時か）を教えてください。ログの読み方も含めて切り分けます。



