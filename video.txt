以下の内容で回答します。

⸻

1. 前提
	•	カメラはWindows側に接続済み
	•	プログラム実行はWSL2のUbuntu内のDockerコンテナ上
	•	Pythonで5秒間の映像を記録し、aviファイルとして保存

⸻

2. 注意点・追加設定

A. カメラの利用に関する注意
	•	WSL2やDockerコンテナではWindowsデバイス直アクセス不可が基本
	•	つまり、Windowsに物理接続されたカメラを、直接WSL2やその上のDockerから使うのはかなり制限ありです

解決パターン
	•	一番現実的な方法
	1.	Windows側でカメラをIPカメラ化して配信（例：OBSの仮想カメラ、MJPEG streamer、IP Webcamなど）
	2.	WSL2やDocker側からはネットワーク越しにストリームを取得（RTSP/HTTP/MJPEG等）

⸻

3. サンプル（IPカメラ配信の場合）

まずWindows側でIPカメラ配信設定をしてください。
例えば、IP Webcam（スマホの場合）や、OBSの「仮想カメラ＋配信」など。

Pythonサンプルコード（OpenCVで5秒録画）

import cv2
import time

# ここにIPカメラのURLをセット
# 例: "http://192.168.1.10:8080/video"
CAMERA_URL = "http://<windows_ip>:<port>/video"

# 動画保存設定
output_file = "output.avi"
fps = 20.0    # フレームレート
record_sec = 5  # 録画秒数

# ストリームオープン
cap = cv2.VideoCapture(CAMERA_URL)
if not cap.isOpened():
    print("カメラに接続できません")
    exit()

# 映像サイズ取得
width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# 動画保存用のWriter
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter(output_file, fourcc, fps, (width, height))

start = time.time()
while (time.time() - start) < record_sec:
    ret, frame = cap.read()
    if not ret:
        break
    out.write(frame)

cap.release()
out.release()
print(f"{output_file} に保存しました")


⸻

4. もし「USBカメラを直接使いたい」場合

1. WSL2のUbuntuで
	•	/dev/video* が見えていれば cv2.VideoCapture(0) などでアクセス可能
	•	ただし通常WSL2では直接は見えない
	•	Windows側で「カメラを共有」する方法があるが、現状公式にはサポートされていない（将来のWindows/WSL2更新で改善される可能性あり）

2. Dockerコンテナで
	•	--device=/dev/video0 などでデバイスをマウントして起動する
	•	例:

docker run --rm -it --device=/dev/video0:/dev/video0 your_image


	•	ただし、前述の通りWSL2でUSBパススルーは基本できない

⸻

5. まとめ

おすすめ構成
	•	Windows側でカメラをIPカメラ化（ローカルネット配信）
	•	WSL2/Dockerからはネット越しに取得し録画

⸻

6. 参考：必要なパッケージ

Dockerfileで

RUN apt-get update && apt-get install -y python3-opencv ffmpeg

または

pip install opencv-python


⸻

ご希望の形や環境詳細（例：USBカメラ直結利用必須 or IPカメラ化可能か）などあれば教えてください。
どちらのルートでも細かく手順を案内できます！