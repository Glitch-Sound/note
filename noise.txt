以下は、Pythonで指定の音声処理フローを実現するサンプルコードです。

本例では、
	•	マイク入力で5秒間録音
	•	noisereduceライブラリでノイズ除去を段階的に4回実施
	•	各段階ごとに先頭0.5秒をノイズプロファイルとし、以降を処理
	•	最初(A)と最終(E)の音声をwavファイル保存

に対応しています。

⸻

必要なパッケージ
	•	sounddevice
	•	scipy
	•	noisereduce
	•	numpy

pip install sounddevice scipy noisereduce numpy


⸻

コード全体

import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import noisereduce as nr

DURATION = 5          # seconds
FS = 16000            # sample rate
NOISE_PROFILE_SEC = 0.5

def record_audio(duration, fs):
    print(f"Recording {duration}秒...")
    audio = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='float32')
    sd.wait()
    return audio.flatten()

def save_wav(filename, data, fs):
    # -1.0〜1.0のfloat→16bit intへ変換
    wav.write(filename, fs, (data * 32767).astype(np.int16))

def reduce_noise(data, fs, noise_profile_sec):
    prof_samples = int(noise_profile_sec * fs)
    noise_profile = data[:prof_samples]
    target = data[prof_samples:]
    reduced = nr.reduce_noise(y=target, y_noise=noise_profile, sr=fs)
    return np.concatenate([noise_profile, reduced])

def main():
    # 1. 5秒間録音→A
    A = record_audio(DURATION, FS)
    save_wav("A.wav", A, FS)

    # 2. A: 0.5秒ノイズプロファイルで残りをノイズ除去→B
    B = reduce_noise(A, FS, NOISE_PROFILE_SEC)
    # 3. B: 0.5秒ノイズプロファイルで残りをノイズ除去→C
    C = reduce_noise(B, FS, NOISE_PROFILE_SEC)
    # 4. C: 0.5秒ノイズプロファイルで残りをノイズ除去→D
    D = reduce_noise(C, FS, NOISE_PROFILE_SEC)
    # 5. D: 0.5秒ノイズプロファイルで残りをノイズ除去→E
    E = reduce_noise(D, FS, NOISE_PROFILE_SEC)

    # 6. AとEを保存
    save_wav("A.wav", A, FS)
    save_wav("E.wav", E, FS)
    print("A.wav, E.wav を保存しました。")

if __name__ == "__main__":
    main()


⸻

補足
	•	このまま動かせば、カレントディレクトリにA.wav（元音声）, E.wav（4段階ノイズ除去済） が出力されます。
	•	入力はマイクですが、wavファイルから読み込む場合はscipy.io.wavfile.readを使ってください。
	•	ノイズ除去の効果はプロファイル次第です。より安定したプロファイルにしたい場合、無音部分を長めにするなど調整してください。

⸻

用途や環境に合わせてチューニングも可能です。
ご要望があれば、ファイル入力バージョン等も提示できます！



はい、指定内容に合わせてデータEのみ3秒になるように処理フローを実装します。
ポイントは
	•	毎ステップで「0.5秒以降〜最後まで」のみを対象にノイズ除去し、その区間だけを次段階へ渡す
	•	5回繰り返すことで最終的にEは5-0.5×4=3秒となる
	•	Aは5秒, Eは3秒でwav保存

⸻

実装例

import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import noisereduce as nr

FS = 16000
DURATION = 5           # 録音時間[s]
NOISE_PROFILE_SEC = 0.5

def record_audio(duration, fs):
    print(f"{duration}秒間録音中...")
    audio = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='float32')
    sd.wait()
    return audio.flatten()

def save_wav(filename, data, fs):
    wav.write(filename, fs, (data * 32767).astype(np.int16))

def noise_reduce_sub(data, fs, noise_profile_sec):
    prof_samples = int(noise_profile_sec * fs)
    # プロファイル取得
    noise_profile = data[:prof_samples]
    # 0.5秒以降のみ対象
    target = data[prof_samples:]
    # ノイズ除去
    reduced = nr.reduce_noise(y=target, y_noise=noise_profile, sr=fs)
    return reduced  # プロファイル部分は渡さない

def main():
    # 1. 録音
    A = record_audio(DURATION, FS)
    save_wav("A.wav", A, FS)  # 5秒

    # 2. 0.5秒以降をノイズ除去→B (4.5秒)
    B = noise_reduce_sub(A, FS, NOISE_PROFILE_SEC)
    # 3. 0.5秒以降をノイズ除去→C (4.0秒)
    C = noise_reduce_sub(B, FS, NOISE_PROFILE_SEC)
    # 4. 0.5秒以降をノイズ除去→D (3.5秒)
    D = noise_reduce_sub(C, FS, NOISE_PROFILE_SEC)
    # 5. 0.5秒以降をノイズ除去→E (3.0秒)
    E = noise_reduce_sub(D, FS, NOISE_PROFILE_SEC)

    # 6. 保存
    save_wav("E.wav", E, FS)  # 3秒

    print("A.wav(5秒), E.wav(3秒) を保存しました")

if __name__ == "__main__":
    main()


⸻

【補足】
	•	noise_reduce_sub関数は、「先頭0.5秒をノイズプロファイルとして残り全体をノイズ除去し、プロファイル部分は返さない」仕様です。
	•	ステップごとに0.5秒短くなり、最終的にEは3秒。
	•	途中のB～Dも同様の長さ変化です。
	•	入力はマイクですが、wavファイル読み込みにもすぐ対応できます。

⸻

ご要望通りの挙動です。
wavファイル読み込み/保存やサンプリングレート変更、進捗ログ追加等、追加要望もあればすぐ出せます。




import matplotlib.pyplot as plt
from scipy import signal

def plot_spectrogram(data, fs, title="Spectrogram"):
    f, t, Sxx = signal.spectrogram(data, fs)
    plt.figure(figsize=(10, 4))
    plt.pcolormesh(t, f, 10 * np.log10(Sxx + 1e-12), shading='gouraud')
    plt.ylabel('Frequency [Hz]')
    plt.xlabel('Time [sec]')
    plt.title(title)
    plt.colorbar(label='Level [dB]')
    plt.tight_layout()
    plt.show()

# 例: Eのスペクトログラム
plot_spectrogram(E, FS, title="E (Normalized) Spectrogram")





import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt

def save_librosa_spectrogram_image(data, fs, filename):
    D = librosa.stft(data)
    S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(S_db, sr=fs, x_axis='time', y_axis='hz', cmap='magma')
    plt.colorbar(format='%+2.0f dB')
    plt.title('Spectrogram (librosa)')
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()  # 画像ウィンドウを閉じる

# 例: E（正規化済みデータ）のスペクトログラム画像を保存
save_librosa_spectrogram_image(E_norm, FS, "E_spectrogram.png")





