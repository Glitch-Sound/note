C#でSqlGeography型カラムを持つSQL ServerテーブルにBULK INSERTを行う場合、
通常のBULK INSERT（SqlBulkCopyやBULK INSERTコマンド）はジオメトリ型のバイナリを直接流し込むことができません。
ジオメトリ型のカラム（geometryやgeography）にはWKT（Well-Known Text）やWKB（Well-Known Binary）等の形式でデータを用意し、INSERT時に変換する必要があります。

アプローチ例
	1.	一時テーブルに文字列（WKTなど）で取り込む
	2.	INSERT ... SELECTで本テーブルに変換して格納

⸻

サンプル構成

1. テーブル例

CREATE TABLE dbo.SampleTable (
    Id INT PRIMARY KEY,
    Name NVARCHAR(100),
    Location geography  -- ← SqlGeography型
);

2. 一時テーブル（BULK INSERT用、Locationは文字列）

CREATE TABLE dbo.SampleTable_Staging (
    Id INT,
    Name NVARCHAR(100),
    LocationWkt NVARCHAR(MAX)   -- ← WKT形式
);


⸻

3. CSVファイル例

Id,Name,LocationWkt
1,PointA,POINT(139.700556 35.689444)
2,PointB,POINT(135.498333 34.693889)


⸻

4. C#でのBULK INSERTサンプル

4-1. ステージングテーブルへのBulkCopy

using System.Data;
using System.Data.SqlClient;

var connStr = "Server=localhost;Database=YOUR_DB;Trusted_Connection=True;";
using var conn = new SqlConnection(connStr);
conn.Open();

var bulk = new SqlBulkCopy(conn)
{
    DestinationTableName = "dbo.SampleTable_Staging"
};

var dt = new DataTable();
dt.Columns.Add("Id", typeof(int));
dt.Columns.Add("Name", typeof(string));
dt.Columns.Add("LocationWkt", typeof(string));

// サンプルデータ追加
dt.Rows.Add(1, "PointA", "POINT(139.700556 35.689444)");
dt.Rows.Add(2, "PointB", "POINT(135.498333 34.693889)");

bulk.WriteToServer(dt);


⸻

4-2. ステージング→本テーブルへのINSERT（SQL）

INSERT INTO dbo.SampleTable (Id, Name, Location)
SELECT
    Id,
    Name,
    geography::STGeomFromText(LocationWkt, 4326)
FROM dbo.SampleTable_Staging;


⸻

5. まとめ
	•	BULK INSERTの本体はWKT形式で投入
	•	後処理でgeography型へ変換

⸻

補足：一括処理をC#で行う例

C#から後処理までやる場合：

using (var cmd = new SqlCommand(
    @"INSERT INTO dbo.SampleTable (Id, Name, Location)
      SELECT Id, Name, geography::STGeomFromText(LocationWkt, 4326)
      FROM dbo.SampleTable_Staging", conn))
{
    cmd.ExecuteNonQuery();
}


⸻

直接SqlBulkCopyでSqlGeography型は使えない
	•	DataTableやSqlBulkCopyで SqlGeography オブジェクトを直接投入することはできません（シリアライズが必要）。
	•	WKTなどを使い、一時テーブル→変換がベストプラクティス。

⸻

ご質問の「サンプルコード」はこの流れが一般的です。
もし「CSV→SQLServer一発で地理データ投入」など特別な要望があれば教えてください。





---
一時テーブルにBULKINSERTを行い、一時テーブルから本番テーブルに変換しながら取り込む方法か？
---

はい、その通りです！
SqlGeography型のような特殊な型を持つ場合、基本的には「一時テーブルに文字列（WKTやWKB）としてBULK INSERT → 変換して本番テーブルにINSERT」する方法が王道です。

⸻

具体的な流れ
	1.	CSVファイルなどからBULK INSERTで一時テーブル（LocationWktなど文字列カラム）にデータ投入
	2.	T-SQL（INSERT ... SELECT ... geography::STGeomFromText(...)）で、本番テーブルに変換しながら挿入
	3.	不要なら一時テーブルは削除、またはtruncateして使い回し

⸻

イメージ

CSV    →    一時テーブル（文字列形式）    →   本番テーブル（SqlGeography）
             ↑BULK INSERT                    ↑INSERT ... SELECT ... geography::STGeomFromText()


⸻

メリット
	•	BULK INSERTは文字列として高速に投入できる
	•	SqlGeography型への変換ロジックをDB側に任せられる
	•	失敗時のリカバリも容易（例：不正なWKTが弾かれる）

⸻

よくある質問
	•	一時テーブルを省略して直接本番テーブルに入れる方法は？
→ SqlBulkCopyではSqlGeography型の値を直接投入できないため、一般的には一時テーブル経由がベストです。
	•	WKT以外も使える？
→ WKBやGMLなども変換関数が用意されていますが、WKTが扱いやすく一般的です。

⸻

このやり方がSQL Server × C# × SqlGeography型の標準的なバルク投入方法です！
もしもう少しスマートな方法やパフォーマンス重視の工夫が欲しければ、具体的な用途や件数など教えてもらえればアドバイスできます！



---
現在はBULKINSERTを行なっていない影響で、AzureのLogAnalyticsのログ容量の増加が課題となっている。
一時テーブルを使う方法でログ削減は可能か？
---

良いポイントです。
結論から言うと「一時テーブルを使う方法で、Log Analyticsのログ容量削減は十分に期待できます」。

⸻

背景
	•	BULK INSERTを使っていない場合、個別にINSERT文を何度も発行 →
そのたびにAzure SQLやLog Analytics側で「各トランザクション・各クエリ」が詳細に記録される
	•	BULK INSERTを使う場合、まとめて一度の処理としてDBに投入されるので
ログ件数が激減し、トランザクションログやLog Analyticsの記録量も減る

⸻

なぜ一時テーブル方式でログが減るのか？
	•	一時テーブルに対するBULK INSERTは「1回のバルク操作」なので、ログ件数が大きく減る
	•	その後の「INSERT … SELECT …」も、一括なのでログはまとめて記録される
	•	各データごとの小さいINSERT文が大量に発行されるのを防げる

⸻

イメージ比較

手法	Log Analyticsへの記録例
1件ずつINSERT	INSERTごとに1件ずつ細かく記録
BULK INSERT＋一括変換	バルク操作・一括変換で記録回数が激減


⸻

注意点
	•	Log Analyticsの収集範囲（クエリ監査等）によっては、「BULK INSERT」や「一括INSERT」自体の実行記録は残ります
ただし、1件ずつ大量に記録されるより圧倒的に少ないです
	•	アプリケーションエラーなど、個別INSERTのエラーも大幅に減るので、エラーログ自体も減少

⸻

おすすめ運用例
	1.	アプリ側でDataTableやCSVファイルなどでデータまとめて一時テーブルにBULK INSERT
	2.	一時テーブル→本番テーブルへの一括変換投入（T-SQL）
	3.	処理後に一時テーブルをTRUNCATE（空にする）

⸻

まとめ
	•	一時テーブル方式+BULK INSERTで、SQLサーバ側・Log Analytics両方のログ件数を大きく削減できます
	•	バルクで投げる回数・単位を調整することで、最適なログ量コントロールが可能です

⸻

もし現状のログ増大量や負荷の詳細が分かれば、
「どのぐらい減るか」「最適なバルク件数」などさらに踏み込んだアドバイスもできます！



---
別途NetToplogySuiteという外部ライブラリを利用すればSqlGeographyのBULKINSERTが可能との情報がある。
どちらの手段が適当か。

ライセンスもあり、なるべく外部ライブラリは使いたくない。
---

ご指摘の通り、
NetTopologySuite（NTS）を使えば、C#側でSqlGeographyやSqlGeometry型の値を扱いやすくなり、バイナリ化してそのままSqlBulkCopyで投入できるという情報があります。
（特にMicrosoft.Data.SqlClientとNTSの組み合わせで、geography型カラムを直接扱えるケース）

⸻

どちらの手段が適切か？

1. NetTopologySuiteを使う場合
	•	メリット
	•	C#側でPointやPolygonなどを柔軟に扱い、SqlGeographyに変換しやすい
	•	（設定次第で）SqlBulkCopyで直接geographyカラムに投入できる場合がある
	•	デメリット
	•	外部ライブラリ導入・運用のコスト
	•	将来の依存リスクや、.NET環境・SQLServerバージョンの変化による動作差異
	•	ライセンス（Apache License 2.0、商用利用もOKですが、ライセンス遵守が必要）

⸻

2. 一時テーブル＋WKT文字列→変換方式（標準T-SQL機能のみ）
	•	メリット
	•	SQLServerと.NET標準だけで完結（余計な依存なし）
	•	シンプルで、将来的な移行や他の言語へのポーティングもしやすい
	•	ライセンスの心配が無い
	•	デメリット
	•	一時テーブル・2段階INSERTの実装・運用手間
	•	巨大データ投入時は若干パフォーマンスが落ちる場合もある

⸻

「外部ライブラリはなるべく使いたくない」場合の結論
	•	一時テーブル＋変換方式が最も安心で汎用的
→「保守」「運用」「ライセンス」「将来性」すべてでリスクが低い
	•	NetTopologySuiteは「どうしても性能が出ない」「既に空間演算などで必須」な時のみ検討
→ ただし、外部依存を最小化したい場合はNTSは導入を避ける方が無難

⸻

まとめ（選定基準）

手法	ライセンス	安心感/移行性	パフォーマンス	推奨シーン
一時テーブル＋変換方式	不要	◎	○	標準機能のみ、シンプル運用したい時
NetTopologySuite利用	Apache 2.0	△	◎（場合あり）	.NET側で空間型処理したい/必須時


⸻

結論：
「外部ライブラリを避けたい」のであれば、一時テーブル方式が王道で推奨です！

もし本当に大量データや処理速度が「課題になる」場合のみ、NTSも検証してみる…くらいが現実的です。





