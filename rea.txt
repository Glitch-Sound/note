Re:Earthプラグイン開発の詳細調査

プラグイン開発の構成（技術スタック・アーキテクチャ）

技術スタック: Re:EarthはモダンなWeb技術で構築されており、フロントエンドには以下の技術が用いられています ￼:
	•	React（UIフレームワーク） ￼
	•	TypeScript（型安全なJavaScript開発のための言語拡張） ￼
	•	Cesium（WebGLベースの3D地球儀描画エンジン） ￼
	•	Resium（Re:Earthチーム製のReact向けCesiumコンポーネントライブラリ） ￼
	•	GraphQL + Apollo Client（バックエンドとのデータ通信にGraphQLクエリ・ミューテーションを使用） ￼
	•	QuickJS (WebAssembly)（軽量JavaScriptエンジンをWebAssembly上で動かし、プラグインコードを安全に実行） ￼

プラグインアーキテクチャ: Re:Earth最大の特徴の一つがプラグインシステムです ￼。プラグインは**「拡張機能 (extension)」**と呼ばれる単位の集合で構成され、1つのプラグインで複数の拡張機能（ウィジェットやブロック等）を提供できます ￼。各プラグインはメタデータと拡張機能一覧を記述したマニフェスト（reearth.yml）を持ち、ID・名称・バージョンや拡張機能の種類（例: widgetやblock）などを定義します ￼。実際、Re:Earth本体に標準搭載されているレイヤー表示機能やインフォボックス内のブロックも「組み込みプラグイン」として実装されており、同様のマニフェストを持っています ￼。

プラグインの実行環境はWebAssembly部分とiframe部分の2つに分かれるハイブリッド構成です ￼。WebAssembly上では先述のQuickJSエンジンによりプラグインのJavaScriptコードがRe:Earth本体と同一スレッド上で同期的に実行され、iframe上では分離された環境で非同期的に実行されます ￼。この仕組みにより、サードパーティ製コードを安全に実行しつつ、プラグインからのUI表示や外部通信を可能にしています ￼。両者はpostMessageによるメッセージ通信で連携し、必要なデータを受け渡します ￼。以下にそれぞれの役割と制約をまとめます。
	•	WASM側: プラグインのエントリポイントとなるスクリプトがこちらで実行されます。Re:Earthのシーンデータ取得やプラグインAPI呼び出し、レイヤープロパティの変更、シーン内イベントの購読などが可能です ￼。プラットフォームのデータに直接アクセスできるため、高速かつ同期的にシーンを操作できます。ただしUIの直接描画やブラウザ提供の大半のWeb API利用はできず、外部とのHTTP通信も行えません（console.logなど一部を除く） ￼。つまり、画面表示やネットワーク通信が必要な場合は後述のiframe側に委ねる必要があります。(※補足: WASM上で動作するQuickJSエンジンはECMAScript 2020に対応しており、ブラウザ環境に依存しない最新のJS構文が利用可能です ￼。)
	•	iframe側: プラグインごとにサンドボックス化されたiframe（オリジンはnull）として動作し、通常のHTML/CSSによる自由なUIレンダリングが可能です ￼。ブラウザの提供するDOM操作やCanvas、fetchなど各種Web APIも利用でき、適切にCORSが設定された外部サーバーからのデータ取得（REST API呼び出し等）も実行できます ￼。例えばプラグイン内でリーフレット（Leaflet）等の外部JSライブラリをタグ経由で読み込んで地図描画することも可能です ￼ ￼。一方でRe:Earthの内部データや状態には直接アクセスできません。必要な情報がある場合はWASM側からpostMessageで受け取り、逆にユーザー操作に応じて生じたイベントや外部取得データはparent.postMessageでWASM側へ送信して処理してもらう形になります ￼ ￼。なお、このiframeはセキュリティのためローカルストレージの使用も禁止されており（オリジンnullのため）、状態を保持したい場合は外部サーバーを利用するかWASM側に依頼する必要があります ￼。

以上のように、プラグインは**「WASM + iframe」ハイブリッド構成で動作し、互いの弱点を補完しています ￼。WASM側で高速なデータアクセス・シーン操作を担い、iframe側でリッチなUI描画や外部通信を担う分業モデルです ￼。両者の通信はJSONシリアライズ可能なデータに限られる（BlobやArrayBufferは不可。バイナリはBase64等でエンコード必要）など多少の制約はありますが ￼、通常のプラグイン機能を実装する上では大きな問題にはなりません。また、プラグインはZipファイル（10MB以下）でパッケージ化して配布・インストールされますが、その際画像などの静的ファイルを直接含めることはできません** ￼。画像やHTMLテンプレート、CSSなどは文字列やBase64データとしてJavaScript内に埋め込むか、あるいは外部の公開サーバーにホストしてURL経由で参照する必要があります ￼。この点はプラグイン開発上の留意事項ですが、将来的には開発者が別ファイルで用意したHTML/CSSを自動的にJSへ埋め込む機能も検討されています ￼。

開発の難易度（学習コスト・API整備状況など）

一般的なReact/TypeScriptエンジニアから見た難易度: ReactとTypeScriptに習熟したエンジニアであれば、Re:Earthプラグイン開発に必要な基礎スキル（HTML/CSS/JSによるフロントエンド開発）はすでに備わっていると考えられます ￼。実際、プラグイン開発では基本的にHTMLでUIを構築し、スタイルはCSS、ロジックはJavaScriptで記述します ￼。小規模なプラグインであれば生のJavaScriptでも対応できますが、大規模なプラグイン開発を行いたい場合はReactやwebpackなどのモダンなWeb技術を組み合わせて開発することも可能と公式ドキュメントで言及されています ￼。そのため、React/TSの知見はそのままプラグイン開発にも活かせます。例えばプラグインのiframe内でReactアプリを動かすことも技術的には可能で、実装方法としてはReactや他のUIライブラリで構築したコンポーネントをビルドして単一のHTML/JSにまとめ、それをreearth.ui.show()で表示する、といった手法が考えられます（実際にLeafletを利用する例が公式レシピに示されています ￼ ￼）。このように、普段使い慣れた開発スタイルを応用できる余地があるため、React/TSエンジニアにとって特別高い壁があるわけではありません。

もっとも、Re:Earthプラグイン開発には独自のアーキテクチャに起因する学習コストも存在します。WASMとiframeにまたがる実行モデルや、postMessageによる非同期通信、プラグイン用APIの使用方法など、最初に把握すべき概念がいくつかあります。ドキュメントでも「通常のHTML/JavaScript実装とは異なる独自の制約を受け入れる必要がある」と注意喚起されています ￼。例えば「プラグインUIを表示するには必ずreearth.ui.show()経由でiframeに描画する」「外部データ取得はCORS制約に注意する」といった点は、一般的なWebアプリ開発とは異なる部分です。このため最初はチュートリアルやレシピ集に沿って基本的なプラグインを作りながら、設計思想に慣れることが推奨されます。

ドキュメントの充実度とAPI整備状況: Re:Earthの公式ドキュメント（日本語版・英語版あり）は比較的充実しており、プラグインの基本から応用まで幅広くカバーされています。チュートリアルで開発手順を学び、レシピ集で具体的なユースケース別コード例（後述）に触れることで、独学でも概念を掴みやすい構成です。 ￼ただし現時点でプラグインAPIはまだ初期段階にあり、今後さらなる拡充が予定されています ￼。ドキュメントにも「プラグインAPIはまだ初期段階です。今後検討されている追加機能は今後のプラグイン計画を参照してください」と明記されています ￼。実際、将来的な拡張案として「シーン全体の動作を変更するプラグイン（シーンプラグイン）」や「編集画面を拡張するプラグイン（エディタープラグイン）」、「高度なデータ分析を行うファンクションプラグイン（WebAssemblyで他言語実装）」などが検討中です ￼。これらが実装されればプラグインでできることの幅は一層広がりますが、現状では対応していない領域も一部あります。

現状のプラグインAPIで可能な操作は、レイヤーやシーン情報の取得・変更、カメラ制御、イベント処理、UI表示など基本的なものに限られています（それでも多くの用途は賄えます）。もし既存APIで不足する機能がある場合は、Issue提起や自前での拡張も視野に入れる必要があるかもしれませんが、Re:Earth自体がオープンソースであるためソースコードを読み込んで内部実装を確認したり、必要に応じてコントリビュートするといった対応も可能です ￼。実際には、まず提供されているAPIを把握することが重要で、公式にはTypeScriptの型定義が公開されているため、これを参照することで利用可能なAPI一覧や各メソッドのシグネチャを把握できます ￼（将来的にはこの型定義から自動生成したリファレンスを公開予定とのこと ￼）。ドキュメントそのものも一部未整備な部分が残っており、たとえばプラグインマニフェストの詳細仕様は執筆中ですが、代替として「Re:Earth組み込みプラグインのマニフェストyaml」やJSONスキーマが提供されています ￼。このように、最新情報を得るためにソースリポジトリ上のドキュメントやスキーマを見る必要があるケースもありますが、裏を返せば公式GitHub上で透明性高く情報公開されているとも言えます。

以上を踏まえると、React/TypeScriptに習熟した一般的なSIerであれば自社内で十分プラグイン開発が可能です。学習コストはあるものの、日本語の公式ガイドやサンプルコードが整備されているため独習しやすく、APIの型定義もあるおかげでTypeScript開発者には理解しやすい環境です。また不明点があれば後述するコミュニティで質問・情報収集できるため、社内にそのようなフロントエンド技術者がいれば特段外部に委託せずとも開発を進められるでしょう。逆にReact/TSの経験がない場合は前提知識の習得から必要になりますが、その場合でもWeb標準技術がベースとなっているため学習コストは妥当な範囲と言えます。

開発を開始するための情報源（公式ドキュメント、GitHubリポジトリ、サンプルコード等）

公式ドキュメント: 開発に着手する際はまず公式サイトのドキュメント（Docs）を参照するのが最善です。Re:Earth公式Docsには**「プラグイン開発者ガイド」**が用意されており、日本語でチュートリアルから高度なレシピまで体系的に解説されています。たとえばチュートリアルでは「Hello World」的なウィジェットを作成してプラグインの基本構造（フォルダ構成やマニフェスト記述、Zip化してアップロードする手順）を学べます ￼。さらに「レシピ集」として具体的な機能別の実装例が多数掲載されており、以下のようなトピックごとにサンプルコードと解説が載っています ￼:
	•	HTMLを用いたプラグインUIの作成方法 ￼ ￼
	•	プラグインとRe:Earth（親画面）との間の双方向通信 ￼
	•	ウィジェットのサイズ変更やモーダル・ポップアップ表示 ￼
	•	プラグインが持つユーザー設定可能なプロパティの定義方法 ￼
	•	外部REST APIから取得したデータの表示（CORS設定含む） ￼
	•	カメラコントロールやマウスイベントハンドリング ￼
	•	レイヤーを検索して属性を更新する処理 ￼
	•	画面スクリーンショット撮影や印刷用出力の実装例 ￼

これらレシピは実践的なコード付きで示されており、プラグインAPIの使い方を習得する助けになります。公式DocsはDocusaurusベースで常に最新情報に更新されており、内容も日本語・英語対応なので国内の技術者にとって敷居が低いと言えます。

GitHubリポジトリ: Re:EarthはオープンソースプロジェクトとしてGitHub上でソースコードが公開されています ￼。組織名reearthのもとに複数のリポジトリがあり、フロントエンド（reearth-webもしくはreearth-visualizer）、バックエンド（reearth-backend）、ドキュメントサイト（docs.reearth.io）、およびプラグイン共有関連（後述）などに分かれています。プラグイン開発者にとって参考になるのは、組み込みプラグインのマニフェスト定義やプラグインAPIの型定義が見られる点です。先述の通り公式Docsからこれらの該当ファイルへのリンクが提供されており、具体例としてRe:Earth本体に内蔵されているプラグインのmanifest.ymlや、TypeScriptで記述されたPlugin/types.ts（プラグインAPIの型定義）を読むことで、現行のプラグイン仕様を詳細に理解できます ￼ ￼。加えて、GitHub上ではコミュニティが開発したプラグインのカタログも公開されています。公式の「awesome-reearth-plugins」リポジトリでは、有用なプラグインの一覧と概要、および参考実装へのリンクが整理されています ￼ ￼。例えば「Tweet Block」というプラグインでは、Twitterの投稿をRe:Earthのインフォボックス内に表示するブロック機能を提供しており、そのソースコード（MITライセンス）が公開されています ￼。公式が用意した**プラグインひな形（example plugin）**もあり、プラグイン開発の雛形プロジェクトとして参照できます ￼。これら実例を見ることで、マニフェストの書き方やディレクトリ構成、コーディングパターンなどを掴むことができるでしょう。

開発者向け情報その他: 公式Webサイトではブログやニュースリリースを通じてRe:Earthのアップデート情報やユースケース紹介が行われています。Eukarya社（Re:Earth開発元）のNoteブログでは、最新の開発動向やProject PLATEAUとの協業事例などが日本語で詳しく紹介されています ￼ ￼。また、Re:Earthにはプラグインエディターと呼ばれる開発支援ツールも用意されています ￼。これはブラウザ上でコードを書きながらリアルタイムにプラグインの動作をプレビューできる環境で、編集画面を開いた左側に実行結果（プラグインのウィジェット表示）、右側にコードエディタが配置されたインタラクティブな仕組みです ￼。従来、プラグイン開発中はコードを修正しては毎回zipに圧縮し直し、再インストールして動作確認…という非効率な手順が必要でしたが、プラグインエディターを使えばその手間を省略できます ￼。現時点ではマニフェスト内容の編集反映ができない、編集内容が保存されない等の制限はありますが ￼、将来的な改良に向けて開発が継続されています ￼。このように、公式はドキュメント以外にも開発体験を向上させるツールや情報源を提供しており、プラグイン開発の敷居を下げる工夫がなされています。

活発なコミュニティやサポート体制

Re:Earthはオープンソースプロジェクトであることもあり、コミュニティ主導の活動が活発です。公式のDiscordサーバーが開設されており、開発者やユーザー同士が日常的に質疑応答や情報交換を行っています ￼。プラグイン開発に関する質問や困りごともDiscord上で尋ねることができ、開発チームのメンバーや他のユーザーから回答を得られるケースが多いようです。また、GitHub上ではIssueの報告・トラッキングや、Discussions機能による議論の場も提供されています ￼。プロジェクトのロードマップも公開されており、どの機能が今後実装予定かを誰でも閲覧できます ￼。実際、プラグインエディター機能の改良については「コミュニティからの提案やアイデアをお待ちしています。ぜひDiscordまたはGitHubで議論しましょう！」と公式が呼びかけており ￼、ユーザーのフィードバックを積極的に取り入れる姿勢が見られます。

また、有志による勉強会やハンズオンも開催されています。過去にはRe:Earthプラグインの仕組みを解説するハンズオンイベントや、国土交通省主催でRe:Earthプラグインを使ったハッカソンが実施された例もあります ￼。このようなイベントを通じてノウハウが共有されており、コミュニティベースでプラグインのライブラリ拡充や事例紹介が進められています。公式ドキュメント内の「Discussions」やGitHubのPull Request履歴を見ても、外部コントリビュータからの提案や改善コードが取り込まれていることが確認できます。以上より、コミュニティは比較的活発であり、困ったときに相談できる場や先行事例が存在することは、プラグイン開発者にとって大きな支えとなるでしょう。

GISアプリ開発経験者から見た移行のしやすさ

地図アプリやGISアプリの開発経験がある企業・エンジニアにとって、Re:Earthプラグイン開発への移行は比較的スムーズに行えると考えられます。その理由として、まず基盤技術の親和性が挙げられます。Re:EarthはCesiumによる3D地図描画を核に据えており、GIS分野で一般的な座標系や3Dタイル表示（3D Tiles）、地理院地図などのベースマップ利用にも対応しています ￼ ￼。もし過去にCesiumやTerriaJS、Leaflet、OpenLayersといったWeb GIS技術を扱った経験があるなら、Re:Earthの概念（レイヤーやカメラ制御、地物の属性情報の扱いなど）にも容易に馴染めるでしょう。実際、Re:Earthでは各種地理データ（CityGMLやShapefile等）を取り込み3D/2D表示する機能が揃っており、これらはノーコードで利用可能です。その上で「特定の業務ニーズに合わせたカスタム機能」だけをプラグインとして実装すればよい構造のため、一からGISアプリを構築するより圧倒的に効率的です。基盤部分（データ管理・描画・共有）はRe:Earthプラットフォームが担ってくれるので、開発者は付加価値の部分に専念できます。

過去の事例からも、そのスムーズさが窺えます。例えば国土交通省の3D都市モデルプロジェクト「PLATEAU」では、当初オープンソースのTerriaJSを用いて構築していた「PLATEAU VIEW」というWeb GISアプリケーションを、Re:Earthのプラグイン機能によって再現・刷新しています ￼。2022年度に公開されたPLATEAU VIEW 2.0は、TerriaJSベースの旧バージョンの機能をすべてプラグインとして実装しなおしたもので、専門知識がなくても使える完全ノーコード環境を実現しました ￼。このように、既存のGISアプリ開発ノウハウを持つチームがRe:Earthに移行し、短期間で遜色ない機能を実装できたケースがあります。PLATEAU VIEWの例では、UI/UXの洗練や描画パフォーマンス向上も図られたとの報告があり ￼ ￼、プラグイン開発を通じて既存システムの弱点を補完することも可能でした。

GIS開発経験者にとっては、地理空間情報特有の課題（測地系や投影法の知識、大規模データの扱いなど）の多くが共通するため、Re:Earth固有の概念に適応するハードルは低いでしょう。むしろRe:Earthを使うことで、これまで手作業や個別実装していた部分がプラットフォームに吸収されるメリットを享受できます。例えばデータのホスティングやタイル変換、ユーザー権限管理などはRe:Earth CMS/バックエンドが担うため、自社でインフラを用意する必要がありません ￼ ￼。また、オープンソースであるため社内セキュリティポリシーに則ったカスタマイズも可能で、必要に応じてフォークして独自拡張するといった選択肢もあります。総合すると、地図GIS分野の知見を持つ企業ほどRe:Earthプラットフォームを有効活用できる可能性が高く、プラグイン開発への移行も円滑に行えると考えられます。既存のスキルセットを土台に、足りない部分（Re:EarthのAPI仕様など）をキャッチアップすればよく、公式のサポート体制も整っているため不明点も解決しやすい環境です。

最後に付け加えると、Re:Earthは今なお活発に開発が進められているプロジェクトです。2025年現在も改善や新機能追加が続いており、コミュニティの成長とともにプラグインのエコシステムも発展していくことが期待されます ￼。地図/GISアプリ開発経験を持つ企業にとって、Re:Earthは自社ソリューションに組み込むプラットフォームとして十分実用的かつ拡張可能な選択肢と言えるでしょう。必要な人材（React/TSエンジニア）が社内にいれば、自社開発でカスタム機能を実装できますし、コミュニティや公式サポートを活用しながら開発を進められる点でリスクも抑えられます。以上の調査結果から、Re:Earthプラグイン開発は技術スタックの親和性・ドキュメント整備・コミュニティ支援の観点で良好な状況にあり、GIS開発の知見を持つ企業であれば比較的スムーズに移行できるものと整理できます。

参考資料: Re:Earth公式ドキュメント ￼ ￼、GitHubリポジトリ、Eukarya社ブログ記事 ￼等。各種リンクや詳細な引用は本文中に記載しましたので、ご参照ください。

